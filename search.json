[{"title":"并发编程：简单理解多线程的实现","url":"http://yoursite.com/passages/并发编程/并发编程：简单理解多线程的实现/","content":"<h2 id=\"实现线程的四种方式\"><a href=\"#实现线程的四种方式\" class=\"headerlink\" title=\"实现线程的四种方式\"></a>实现线程的四种方式</h2><h2 id=\"一、创建线程\"><a href=\"#一、创建线程\" class=\"headerlink\" title=\"一、创建线程\"></a>一、创建线程</h2><p>创建线程有如下四种方式</p>\n<ul>\n<li><p>继承Thread类并重写run方法；</p>\n</li>\n<li><p>通过实现Runnable接口的类并且实现run方法；</p>\n</li>\n<li><p>实现Callable接口通过FutureTask包装器来创建Thread线程；</p>\n</li>\n<li><p>使用ExecutorService、Callable、Future实现有返回结果的多线程（使用ExecutorService来管理前三种方式）</p>\n</li>\n</ul>\n<p>本文介绍前两种方式</p>\n<h3 id=\"1-1继承Thread创建线程的代码实现\"><a href=\"#1-1继承Thread创建线程的代码实现\" class=\"headerlink\" title=\"1.1继承Thread创建线程的代码实现\"></a>1.1继承Thread创建线程的代码实现</h3><p>创建一个线程类，继承Thread，重写run()：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过main方法测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThreadTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyThread thread1 = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        MyThread thread2 = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\"></span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动线程的方法为Thread.start()，而需要让线程完成的操作重写在Thread.run()里。</p>\n<h3 id=\"1-2实现Runnable接口的类并实现run方法\"><a href=\"#1-2实现Runnable接口的类并实现run方法\" class=\"headerlink\" title=\"1.2实现Runnable接口的类并实现run方法\"></a>1.2实现Runnable接口的类并实现run方法</h3><p> 实现Runnable接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过Thread构造方法来创建新的线程，参数类型应为Runnable的实现类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRunnableTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> MyRunnable());</span><br><span class=\"line\">        Thread thread2 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> MyRunnable());</span><br><span class=\"line\"></span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>与继承Thread类方式一样，也需要通过Thread.start()来启动线程。</p>\n<h2 id=\"二、Java多线程实现分析\"><a href=\"#二、Java多线程实现分析\" class=\"headerlink\" title=\"二、Java多线程实现分析\"></a>二、Java多线程实现分析</h2><h3 id=\"2-1-Java中初始化线程的过程\"><a href=\"#2-1-Java中初始化线程的过程\" class=\"headerlink\" title=\"2.1 Java中初始化线程的过程\"></a>2.1 Java中初始化线程的过程</h3><p>首先点开java.lang.Thread会发现，实际上Thread类也实现了Runnable接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br></pre></td></tr></table></figure>\n\n<p>在Thread类中，实现了run()方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        target.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个方法中，对target进行判断是否为空，如果target不为空则执行target.run()，找到target被定义的位置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Runnable target;</span><br></pre></td></tr></table></figure>\n\n<p>target是一个Runnable的对象，前面两种实现方式分别用到了Thread()、Thread(Runnable)构造方法，找到这两个构造方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Thread</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       init(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"string\">\"Thread-\"</span> + nextThreadNum(), <span class=\"number\">0</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Thread</span><span class=\"params\">(Runnable target)</span> </span>&#123;</span><br><span class=\"line\">       init(<span class=\"keyword\">null</span>, target, <span class=\"string\">\"Thread-\"</span> + nextThreadNum(), <span class=\"number\">0</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这两个构造方法调用了init方法，找到init方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ThreadGroup g, Runnable target, String name,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                  <span class=\"keyword\">long</span> stackSize)</span> </span>&#123;</span><br><span class=\"line\">    init(g, target, name, stackSize, <span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而这个init方法又调用了另外一个init方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Initializes a Thread.</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> g the Thread group</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> target the object whose run() method gets called</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> name the name of the new Thread</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> stackSize the desired stack size for the new thread, or</span></span><br><span class=\"line\"><span class=\"comment\">    *        zero to indicate that this parameter is to be ignored.</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> acc the AccessControlContext to inherit, or</span></span><br><span class=\"line\"><span class=\"comment\">    *            AccessController.getContext() if null</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> inheritThreadLocals if &#123;<span class=\"doctag\">@code</span> true&#125;, inherit initial values for</span></span><br><span class=\"line\"><span class=\"comment\">    *            inheritable thread-locals from the constructing thread</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ThreadGroup g, Runnable target, String name,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                     <span class=\"keyword\">long</span> stackSize, AccessControlContext acc,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                     <span class=\"keyword\">boolean</span> inheritThreadLocals)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (name == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">\"name cannot be null\"</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\"></span><br><span class=\"line\">       Thread parent = currentThread();</span><br><span class=\"line\">       SecurityManager security = System.getSecurityManager();</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (g == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">           <span class=\"comment\">/* Determine if it's an applet or not */</span></span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">/* If there is a security manager, ask the security manager</span></span><br><span class=\"line\"><span class=\"comment\">              what to do. */</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (security != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">               g = security.getThreadGroup();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">/* If the security doesn't have a strong opinion of the matter</span></span><br><span class=\"line\"><span class=\"comment\">              use the parent thread group. */</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (g == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">               g = parent.getThreadGroup();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/* checkAccess regardless of whether or not threadgroup is</span></span><br><span class=\"line\"><span class=\"comment\">          explicitly passed in. */</span></span><br><span class=\"line\">       g.checkAccess();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        * Do we have the required permissions?</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (security != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (isCCLOverridden(getClass())) &#123;</span><br><span class=\"line\">               security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       g.addUnstarted();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">this</span>.group = g;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.daemon = parent.isDaemon();</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.priority = parent.getPriority();</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (security == <span class=\"keyword\">null</span> || isCCLOverridden(parent.getClass()))</span><br><span class=\"line\">           <span class=\"keyword\">this</span>.contextClassLoader = parent.getContextClassLoader();</span><br><span class=\"line\">       <span class=\"keyword\">else</span></span><br><span class=\"line\">           <span class=\"keyword\">this</span>.contextClassLoader = parent.contextClassLoader;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.inheritedAccessControlContext =</span><br><span class=\"line\">               acc != <span class=\"keyword\">null</span> ? acc : AccessController.getContext();</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">       setPriority(priority);</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (inheritThreadLocals &amp;&amp; parent.inheritableThreadLocals != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">           <span class=\"keyword\">this</span>.inheritableThreadLocals =</span><br><span class=\"line\">               ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);</span><br><span class=\"line\">       <span class=\"comment\">/* Stash the specified stack size in case the VM cares */</span></span><br><span class=\"line\">       <span class=\"keyword\">this</span>.stackSize = stackSize;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/* Set thread ID */</span></span><br><span class=\"line\">       tid = nextThreadID();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，这是初始化一个线程的核心方法，并且是private的</p>\n<p>实现线程的两种方式，第一种继承了Thread类，重写了run方法，而没有重写start方法，所以start方法还是原来父类Thread的start方法，第二种通过传入Runnable对象构造Thread对象，也用的是Thread的start方法，那么看看start方法做了什么：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Causes this thread to begin execution; the Java Virtual Machine</span></span><br><span class=\"line\"><span class=\"comment\"> * calls the &lt;code&gt;run&lt;/code&gt; method of this thread.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * The result is that two threads are running concurrently: the</span></span><br><span class=\"line\"><span class=\"comment\"> * current thread (which returns from the call to the</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;code&gt;start&lt;/code&gt; method) and the other thread (which executes its</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;code&gt;run&lt;/code&gt; method).</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * It is never legal to start a thread more than once.</span></span><br><span class=\"line\"><span class=\"comment\"> * In particular, a thread may not be restarted once it has completed</span></span><br><span class=\"line\"><span class=\"comment\"> * execution.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@exception</span>  IllegalThreadStateException  if the thread was already</span></span><br><span class=\"line\"><span class=\"comment\"> *               started.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span>        #run()</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span>        #stop()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * This method is not invoked for the main method thread or \"system\"</span></span><br><span class=\"line\"><span class=\"comment\">     * group threads created/set up by the VM. Any new functionality added</span></span><br><span class=\"line\"><span class=\"comment\">     * to this method in the future may have to also be added to the VM.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * A zero status value corresponds to state \"NEW\".</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (threadStatus != <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalThreadStateException();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Notify the group that this thread is about to be started</span></span><br><span class=\"line\"><span class=\"comment\">     * so that it can be added to the group's list of threads</span></span><br><span class=\"line\"><span class=\"comment\">     * and the group's unstarted count can be decremented. */</span></span><br><span class=\"line\">    group.add(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> started = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        start0();</span><br><span class=\"line\">        started = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!started) &#123;</span><br><span class=\"line\">                group.threadStartFailed(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable ignore) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/* do nothing. If start0 threw a Throwable then</span></span><br><span class=\"line\"><span class=\"comment\">              it will be passed up the call stack */</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>start()会调用start0()方法，start0是一个native方法，看不到底层实现，但start方法前面的注释已经说的很明白了：“Java虚拟机将会执行这个线程对象的run方法”。回到一开始，run方法对target对象进行了判断，如果target为空，那么run方法将什么都不做，如果target不为空，则调用target.run()。而通过查看源码发现，如果使用的是Thread()构造方法，调用init方法时，传入的target为null，如果使用的是Thread(Runnable)构造方法，调用init方法时，传入的Runnable将会赋值给最终的target，也就是说，通过继承Thread方法实现线程时，最终将会被调用的是重写后的run方法，如果通过实现Runnable创建线程时，最终将会调用传入构造方法的Runnable的run()方法。</p>\n<h3 id=\"2-2-两种实现方式的比较\"><a href=\"#2-2-两种实现方式的比较\" class=\"headerlink\" title=\"2.2 两种实现方式的比较\"></a>2.2 两种实现方式的比较</h3><p>不管使用哪种方式，最终都会通过java.lang.Thread的start方法来执行线程，在这一点上两者是一样的，区别在于继承Thread的本质是通过重写父类的run方法来让线程去执行我们想要执行的代码，而通过传入Runnable对象的本质是实现run方法，并且让Thread对象去执行Runnable对象的run方法来执行我们想要执行的代码。</p>\n<p>前面还提到，Thread也实现了Runnable接口，那么说明一个Thread对象或者Thread子类的对象也是一个Runnable对象，在调用Thread(Runnable)构造方法的时候，我们也可以传入一个Thread对象或者Thread子类的对象，来让一个线程去调用另外一个线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThreadTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyThread thread1 = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        Thread thread2 = <span class=\"keyword\">new</span> Thread(thread1);</span><br><span class=\"line\"></span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在Java中，类不能继承多个，接口却能实现多个，所以如果考虑到扩展性以及原本就继承了其他类，优先使用实现Runnable的方式来实现多线程。</p>\n<h2 id=\"三、使用多线程应该注意的问题\"><a href=\"#三、使用多线程应该注意的问题\" class=\"headerlink\" title=\"三、使用多线程应该注意的问题\"></a>三、使用多线程应该注意的问题</h2><h3 id=\"3-1-一个线程只能被启动一次\"><a href=\"#3-1-一个线程只能被启动一次\" class=\"headerlink\" title=\"3.1 一个线程只能被启动一次\"></a>3.1 一个线程只能被启动一次</h3><p>在start方法前的注释有这么一句话：”It is never legal to start a thread more than once.”，就是说一个线程只允许被启动一次，如果尝试多次启动，将会抛出IllegalThreadStateException异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThreadTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyThread thread1 = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\"></span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread &quot;main&quot; java.lang.IllegalThreadStateException</span><br><span class=\"line\">\tat java.lang.Thread.start(Thread.java:708)</span><br><span class=\"line\">\tat com.ethan.MyThreadTest.main(MyThreadTest.java:9)</span><br><span class=\"line\">0</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-停止线程\"><a href=\"#3-2-停止线程\" class=\"headerlink\" title=\"3.2 停止线程\"></a>3.2 停止线程</h3><p>在Java中有以下3种方法可以终止正在运行的线程：</p>\n<ul>\n<li>使用退出标志，使线程正常退出，也就是当run方法完成后线程终止。</li>\n<li>使用stop方法强行终止线程，但是实际上不要去使用这个方法，因为stop、suspend、resume都是已经作废过期的方法，使用这些方法有可能产生不可预料的结果。</li>\n<li>使用interrupt方法中断线程</li>\n</ul>\n<h4 id=\"3-2-1使用退出标志终止线程\"><a href=\"#3-2-1使用退出标志终止线程\" class=\"headerlink\" title=\"3.2.1使用退出标志终止线程\"></a>3.2.1使用退出标志终止线程</h4><p>这种方法主要用于线程中有循环执行的情况</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//线程的实现类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//线程停止标志，为true则让线程停止</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isstopping = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">500</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isstopping) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//调用此方法，让run方法跳出循环</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stopRunning</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        isstopping = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//控制类，控制线程的启动与停止</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ControlThread</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MyThread runnable = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Thread thread = <span class=\"keyword\">new</span> Thread(runnable);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startThread</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stopThread</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        runnable.stopRunning();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main方法测试</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThreadTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ControlThread controlThread = <span class=\"keyword\">new</span> ControlThread();</span><br><span class=\"line\">        controlThread.startThread();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        controlThread.stopThread();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">......</span><br><span class=\"line\"><span class=\"number\">50</span></span><br><span class=\"line\"><span class=\"number\">51</span></span><br><span class=\"line\"><span class=\"number\">52</span></span><br><span class=\"line\"><span class=\"number\">53</span></span><br><span class=\"line\"><span class=\"number\">54</span></span><br><span class=\"line\"><span class=\"number\">55</span></span><br><span class=\"line\"><span class=\"number\">56</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，这种方法确实能起到停止线程的效果，但存在诸多弊端。首先这种方式非常的麻烦，又要实现线程类、还要创建一个线程的控制类，局限性也非常的大。并且如果for循环之后还有其他的代码，也将会被执行，不能起到真正停止线程的效果。</p>\n<h4 id=\"3-2-2使用interrupt方法中断线程\"><a href=\"#3-2-2使用interrupt方法中断线程\" class=\"headerlink\" title=\"3.2.2使用interrupt方法中断线程\"></a>3.2.2使用interrupt方法中断线程</h4><p>参考《Java多线程编程核心技术》的1.7节发现，实际上，调用interrupt方法并不能真正的停止线程，只能给线程打上一个停止的标记。但Thread中还有两个方法，分别是interrupted()和isInterrupted()</p>\n<ul>\n<li><p>interrupted</p>\n<p>在文档中是这么描述的”Tests whether the current thread has been interrupted”，也就是说，这个方法是用来测试当前线程是否被interrupte的，这点在源码中能找到证据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">interrupted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> currentThread().isInterrupted(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而currentThread()返回的是执行当前线程的线程，这个方法被标注为static方法，也就是说可以通过Thread.interrupted()来用类调用这个方法，也可以用普通的thread线程对象来调用这个方法，只不过用普通的thread线程对象来调用时，与通过类来调用的效果是一样的，并不会去判断thread类是否被中断</p>\n<p>中断thread1线程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThreadTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(runnable);</span><br><span class=\"line\"></span><br><span class=\"line\">        thread1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        thread1.interrupt();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"是否停止thread1?=\"</span>+thread1.interrupted());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">是否停止thread1?=false</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>中断main线程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThreadTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Thread.currentThread().interrupt();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"是否停止1?\"</span>+Thread.interrupted());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"是否停止2?=\"</span>+Thread.interrupted());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">是否停止1?true</span><br><span class=\"line\">是否停止2?=false</span><br></pre></td></tr></table></figure>\n\n<p>那么又出现了一个问题：为什么第一次判断时是ture而第二次判断则为false?</p>\n<p>在文档中，对interrupted()方法的描述还有这么一句话”The <em>interrupted status</em> of the thread is cleared by this method. “也就是说这个方法将会清除线程的中断状态，接下来再看一下被interrupted()方法调用了的isInterrupted()方法。</p>\n</li>\n<li><p>isInterrupted()</p>\n<p>在文档中是这么描述的”Tests whether this thread has been interrupted. The <em>interrupted status</em> of the thread is unaffected by this method.”可以看出这个方法测试的是调用这个方法的线程对象是否被中断，并且不会清除线程的中断状态。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isInterrupted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isInterrupted(<span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，这个isInterrupted()方法还调用了另一个重载的方法，并且这个方法是private、native修饰的</p>\n<p><img src=\"C:%5CUsers%5CAdministrator%5Cblog%5Cpublic%5Cimages%5C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%5C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%9A%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0-01.png\" alt=\"1563371094350\"></p>\n<p>在注释中还提到，中断状态是否被清除，是由传入参数ClearInterrupted决定的，而interrupted()调用此方法时传入的是true，isInterrupted()调用此方法时传入的是false，这也与文档的描述相应证了。</p>\n</li>\n</ul>\n<hr>\n<p>有了这两个方法之后，就可以用类似前面那种退出标志的方法来终止线程了，这样的话不用我们自己来写控制中断线程标志的方法，但是循环之后的代码会被继续执行的问题还是没有得到解决，结合抛出异常可以解决这个问题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//线程类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">500</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.interrupted())&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"已停止\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InterruptedException();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"异常被捕获\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThreadTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        MyThread thread = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        thread.interrupt();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">......</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">已停止</span><br><span class=\"line\">异常被捕获</span><br></pre></td></tr></table></figure>\n\n<p>通过这种方式，就能够达到让线程停下来的效果。</p>\n<h3 id=\"3-3线程命名\"><a href=\"#3-3线程命名\" class=\"headerlink\" title=\"3.3线程命名\"></a>3.3线程命名</h3><p>在前面分析构造线程的过程中，可以看到调用init方法时传入了一个叫name的参数，这个参数就是线程的名字，当没有调用传入线程名的构造方法时，会自动传入一个名字，这个名字为”Thread-“ + nextThreadNum()，nextThreadNum方法将会执行threadInitNumber++，threadInitNumber是一个静态成员变量，也就是说，当我们不给线程命名时，系统会自动为线程命名，并且这个命名是一个所有线程共享的计数器，每创建一个线程，这个计数器就会+1:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThreadTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            MyThread thread = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">            System.out.println(thread.getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread-0</span><br><span class=\"line\">Thread-1</span><br><span class=\"line\">Thread-2</span><br><span class=\"line\">Thread-3</span><br><span class=\"line\">Thread-4</span><br></pre></td></tr></table></figure>\n\n<p>当我们使用线程时，最好给它指定一个名字，这队排错诊断系统监控有帮助。否则诊断问题时，无法直观知道某个线程的用途。</p>\n","categories":["并发编程"],"tags":["java","并发编程"]},{"title":"用栈实现队列","url":"http://yoursite.com/passages/算法修炼/栈和队列/用栈实现队列/","content":"","categories":["算法修炼","栈和队列"],"tags":["算法","栈和队列"]},{"title":"最小值栈","url":"http://yoursite.com/passages/算法修炼/栈和队列/最小值栈/","content":"","categories":["算法修炼","栈和队列"],"tags":["算法","栈和队列"]},{"title":"2019-7-8-网路协议","url":"http://yoursite.com/passages/2019-7-8-网路协议/","content":"<h3 id=\"1-用户端服务流程\"><a href=\"#1-用户端服务流程\" class=\"headerlink\" title=\"1. 用户端服务流程\"></a>1. 用户端服务流程</h3><p>用户没有账号的话应该先注册，填写员工姓名、编号、所属部门进行注册。如果已经有账号，或者注册完成之后，就输入用户名和密码进行登录。在登录之后，用户端展示工具列表，用户可以查看想要查看的工具，并且通过后台端来查询工具的信息，在工具信息详情页面，展示工具的基本信息，如编号，价格，数量和工具的位置等等。通过查看工具的位置，可以找到工具具体所在的工具柜，用户则可以进行工具的借用。借用工具时，后台端判断用户是否可以借用工具，判断的因素有工具是否损坏、工具数量和用户是否有借用权限。如果不满足借用的条件，则用户无法进行工具的借用，如果满足借用的条件，则可以进行工具的借用。借用时，在后台端生成工具借用的记录，记录包括借用者、借用时间、归还时间、借用数量、借用工具编号等基本信息。在借用完成后，用户就可以取走工具。在即将到归还时间时，会提醒用户进行工具的归还。</p>\n<h3 id=\"2-管理员端服务流程\"><a href=\"#2-管理员端服务流程\" class=\"headerlink\" title=\"2. 管理员端服务流程\"></a>2. 管理员端服务流程</h3><p>管理员由公司分配账号，管理员拿到账号，通过输入账号和密码进行登录。在登录之后，管理员端展示工具列表，管理员可以查看想要查看的工具，并且通过后台端来查询工具的信息，管理员可以对想要修改的工具信息进行修改，可以修改工具的价格，数量，工具的位置等等。如果是修改数量，管理员应该向相应的工具柜补充相应的数量，如果修改工具的位置，则管理员应该把工具转移到相应的工具柜。在确认修改后，修改的工具信息存入数据库，用户端所看到的工具信息也将会同步。</p>\n","categories":[],"tags":[]},{"title":"第四篇","url":"http://yoursite.com/passages/第四篇/","content":"<p>4444444444444</p>\n","categories":["Diary","TC"],"tags":[]},{"title":"第三篇","url":"http://yoursite.com/passages/第三篇博客/","content":"<p>11111</p>\n<p>3333333333333</p>\n<p>444444444444444</p>\n","categories":["Diary","TB"],"tags":["PS3"]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"categories","url":"http://yoursite.com/categories/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"tags","url":"http://yoursite.com/tags/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://yoursite.com/link/index.html","content":"","categories":[],"tags":[]}]